# Build and deploy CLV components and pipelines

steps:

# Clone CLV repo
- name: 'gcr.io/cloud-builders/git'
  args:
  - clone
  - --branch
  - deploy-kfp
  - --depth
  - '1'
  - --verbose
  - https://github.com/${_CLV_REPO}
  - clv

# Create the image for custom build steps 
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'kfp-builder', '.']
  dir: 'clv/deploy/kfp-builder'

# Build a base image for lightweight components
- name: 'gcr.io/cloud-builders/docker' 
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/$_BASE_IMAGE:$_TAG', '.'] 
  dir: 'clv/pipelines/helper_components'

# Build the AutoML Tables component image
- name:  'gcr.io/cloud-builders/docker' 
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/$_AUTOML_TABLES_IMAGE:$_TAG', '.'] 
  dir: 'clv/components/automl_tables'

 # Update component specifications
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: '/bin/bash'
  args: 
  - '-c'
  - |
    SED_SCRIPT='s/\([[:blank:]]*image:[[:blank:]]*\).*/\1gcr\.io\/$PROJECT_ID\/$_AUTOML_TABLES_IMAGE:$_TAG/'
    ls */component.yaml | xargs sed -i $$SED_SCRIPT 
  dir: 'clv/components/automl_tables/specs'

# Update pipeline settings
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: '/bin/bash'
  args: 
  - '-c'
  - |
    SED_SCRIPT='s/\([[:blank:]]*lightweight_components_base_image:[[:blank:]]*\).*/\1gcr\.io\/$PROJECT_ID\/$_BASE_IMAGE:$_TAG/'
    sed -i $$SED_SCRIPT settings.yaml
    SED_SCRIPT='s/\([[:blank:]]*query_template_uri:[[:blank:]]*\).*/\1gs:\/\/$_BUCKET_NAME\/$_ARTIFACTS_FOLDER\/query_template.sql.jinja/'
    sed -i $$SED_SCRIPT settings.yaml
    cat settings.yaml
  dir: 'clv/pipelines'

# Compile the pipelines 
- name: 'kfp-builder'
  args:
  - '-c'
  - |
    dsl-compile --py  train_pipeline.py --output ${_TRAIN_PIPELINE}.tar.gz --disable-type-check
    dsl-compile --py  batch_predict_pipeline.py --output ${_PREDICT_PIPELINE}.tar.gz --disable-type-check
  dir: 'clv/pipelines'

# Create a storage bucket for artificats
# - name: 'gcr.io/cloud-builders/gsutil'
#  entrypoint: 'bash'
#  args:
#  - '-c'
#  - |
#    gsutil mb -p $PROJECT_ID gs://$_BUCKET_NAME || exit 0
#

## Deploy the build artifacts
- name: 'gcr.io/cloud-builders/gsutil'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gsutil mb -p $PROJECT_ID gs://$_BUCKET_NAME || exit 0
    gsutil cp *.tar.gz gs://$_BUCKET_NAME/$_PIPELINES_FOLDER
    gsutil cp artifacts/query_template.sql.jinja gs://$_BUCKET_NAME/$_ARTIFACTS_FOLDER 
    gsutil cp gs://clv-datasets/transactions/* gs://$_BUCKET_NAME/$_SAMPLE_DATASET_FOLDER 
  dir: 'clv/pipelines'
#
#- name: 'gcr.io/cloud-builders/gsutil'
#  args: ['cp', '*.tar.gz', 'gs://$_BUCKET_NAME/$_PIPELINES_FOLDER']
#  dir: 'clv/pipelines'
#
## Deploy the SQL query template
#- name: 'gcr.io/cloud-builders/gsutil' 
#  args: 
#  - cp
#  - artifacts/query_template.sql.jinja
#  - gs://$_BUCKET_NAME/$_ARTIFACTS_FOLDER/query_template.sql.jinja
#  dir: 'clv/pipelines'
#
## Deploy the sample dataset
#- name: 'gcr.io/cloud-builders/gsutil' 
#  args: 
#  - cp
#  - gs://clv-datasets/transactions/transactions.csv
#  - gs://$_BUCKET_NAME/$_SAMPLE_DATASET_FOLDER/transactions.csv
#  dir: 'clv/pipelines'
#- name: 'gcr.io/cloud-builders/gsutil' 
#  args: 
#  - cp
#  - gs://clv-datasets/transactions/test_transactions.csv
#  - gs://$_BUCKET_NAME/$_SAMPLE_DATASET_FOLDER/test_transactions.csv
#  dir: 'clv/pipelines'
#
## Push component images
images: ['gcr.io/$PROJECT_ID/${_BASE_IMAGE}', 'gcr.io/$PROJECT_ID/${_AUTOML_TABLES_IMAGE}']

